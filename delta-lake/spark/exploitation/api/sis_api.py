from flask import Flask, jsonify
from flask_cors import CORS
import duckdb

app = Flask(__name__)
CORS(app)

con = duckdb.connect("/home/sakana/Desktop/trusted_data.db")  # change to your actual path

@app.route('/api/total_student')
def get_total_student():
    df = con.execute('''
    WITH yearly_counts AS (
    SELECT
        cohort_year as year,
        COUNT(*) AS student_count
    FROM cohort_students
    WHERE cohort_year IN (2023, 2024)
    GROUP BY cohort_year
),
pivoted AS (
    SELECT
        MAX(CASE WHEN year = 2024 THEN student_count END) AS students_2024,
        MAX(CASE WHEN year = 2023 THEN student_count END) AS students_2023
    FROM yearly_counts
)
SELECT
    students_2024 AS total,
    CASE
        WHEN students_2024 > students_2023 THEN 'increase'
        WHEN students_2024 < students_2023 THEN 'decrease'
        ELSE 'no change'
    END AS state,
    ROUND(
        100.0 * ABS(students_2024 - students_2023) / NULLIF(students_2023, 0),
        2
    ) AS percent
FROM pivoted;

    ''').df()
    return jsonify(df.to_dict(orient="records"))

@app.route('/api/retention_hist')
def get_retention():
    df = con.execute('''
    WITH final_y as(
SELECT academic_year, count(DISTINCT student_id) AS num_year_4 FROM trusted_student_enrollment tse
WHERE tse.YEAR=4
GROUP BY tse.academic_year
)
,grad_y as(
	SELECT graduation_year,count(DISTINCT student_id) AS num_grad FROM trusted_graduations tg
GROUP BY tg.graduation_year
)
SELECT CAST(SPLIT_PART(academic_year, ' - ', 2) AS INTEGER) AS year,  ROUND(num_grad*100/num_year_4,2) AS rate FROM grad_y gy, final_y fy 
WHERE fy.academic_year = gy.graduation_year 
AND CAST(SPLIT_PART(academic_year, ' - ', 2) AS INTEGER) <2025 AND CAST(SPLIT_PART(academic_year, ' - ', 2) AS INTEGER) >2019
order by academic_year
    ''').df()
    return jsonify(df.to_dict(orient="records"))

@app.route('/api/graduation_hist')
def get_graduation_hist():
    df = con.execute('''
    WITH enroll_year as(
	SELECT student_id, CAST(SPLIT_PART(academic_year, ' - ', 2) AS INTEGER) AS academic_enroll_year
	FROM trusted_student_enrollment
),
dropout_info as(
SELECT academic_enroll_year, tse.student_id, c.dropout_year FROM 
enroll_year tse LEFT JOIN cohort_students c
on	 c.student_id = tse.student_id
--AND dropout_year != tse.academic_enroll_year 
),
enroll AS (
	SELECT academic_enroll_year, count(DISTINCT student_id) AS NStudentEnroll FROM enroll_year tse
	GROUP BY tse.academic_enroll_year
),
not_drop AS (
	SELECT academic_enroll_year, count(student_id) AS non_drop_num FROM dropout_info
	WHERE academic_enroll_year != dropout_year OR dropout_year IS null
	GROUP BY academic_enroll_year
)
SELECT e.academic_enroll_year AS year, ROUND(non_drop_num*100/NStudentEnroll,2) AS rate FROM  enroll e, not_drop nd
WHERE e.academic_enroll_year = nd.academic_enroll_year
AND e.academic_enroll_year <2025 AND e.academic_enroll_year >2019
order by e.academic_enroll_year
    ''').df()
    return jsonify(df.to_dict(orient="records"))
    
   

if __name__ == '__main__':
    app.run(port=3001)
